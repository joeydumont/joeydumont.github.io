<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.joey-dumont.ca/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.joey-dumont.ca/" rel="alternate" type="text/html" /><updated>2020-12-22T21:56:56-05:00</updated><id>https://blog.joey-dumont.ca/feed.xml</id><title type="html">Study of Nature</title><subtitle>A personal blog rooted in my interest for physics, mathematics, technology and literature. Might contain content inappropriate for the non-initiated.
</subtitle><entry><title type="html">Building a multilib MIPS toolchain: my journey through gcc’s build system</title><link href="https://blog.joey-dumont.ca/building-a-multilib-mips-toolchain/" rel="alternate" type="text/html" title="Building a multilib MIPS toolchain: my journey through gcc’s build system" /><published>2019-07-09T00:00:00-04:00</published><updated>2019-07-09T00:00:00-04:00</updated><id>https://blog.joey-dumont.ca/building-a-multilib-mips-toolchain</id><content type="html" xml:base="https://blog.joey-dumont.ca/building-a-multilib-mips-toolchain/">&lt;p&gt;This article assumes that you know to compile a cross-compiler from scratch. If
not, I recommend this &lt;a href=&quot;http://www.ifp.illinois.edu/~nakazato/tips/xgcc.html#binutil&quot;&gt;succinct guide&lt;/a&gt;, or this &lt;a href=&quot;https://preshing.com/20141119/how-to-build-a-gcc-cross-compiler&quot;&gt;longer guide&lt;/a&gt; if you want
to have some context.&lt;/p&gt;

&lt;p&gt;On x86_64 architectures, building gcc such that it can generate both 32- and
64-bit code is easy: just use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--enable-multilib&lt;/code&gt; flag at configuration
time, and everything will follow smoothly (see Arch Linux’s PKGBUILD for
&lt;a href=&quot;https://git.archlinux.org/svntogit/packages.git/tree/trunk/PKGBUILD?h=packages/gcc&quot;&gt;gcc&lt;/a&gt;, the packaging is a bit more complicated, but the build itself is
simple).&lt;/p&gt;

&lt;p&gt;It is not as easy when targeting the MIPS architecture, specifically
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mips64-elf&lt;/code&gt;. By default, the 32-bit ABIs are not part of the multilib setup.
gcc exposes the multilib setup that was used to compile a toolchain via the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-print-multi-lib&lt;/code&gt; option. On your own x86_64 system, you should see something
similar to this (assuming you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc-multilib&lt;/code&gt; on your system)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;valandil ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-print-multi-lib&lt;/span&gt;
.&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
32&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@m32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where the second line shows the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m32&lt;/code&gt; in the build options for the gcc
toolchain itself, and the libraries are stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32/&lt;/code&gt; directory. This
toolchain is thus comprised of two sets of GCC libraries, one compiled with
default options, and one with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m32&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you had installed a mips64-elf toolchain with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--enable-multilib&lt;/code&gt;, by default
you would get the following output&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;valandil ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mips64-elf-gcc &lt;span class=&quot;nt&quot;&gt;-print-multi-lib&lt;/span&gt;
.&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
soft-float&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@msoft-float
el&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@EL
soft-float/el&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@msoft-float@EL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to enable other ABIs, specify other build options for the GCC libraries
in general, you need to know about &lt;em&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs//gcc-3.4.5/gccint/Target-Fragment.html&quot;&gt;Target makefile
fragments&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In short, target Makefile fragments are the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc/config/&amp;lt;target&amp;gt;/t*&lt;/code&gt; files in
gcc’s source tree. When you specify a target at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configure&lt;/code&gt; step, it looks
for those in order to generate the Makefile that will actually build the gcc
libraries &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. For a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mips64-elf&lt;/code&gt; target, the file that is of interest to us is
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc/config/mips/t-elf&lt;/code&gt; file. By default, it sets three Makefile variables&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;MULTILIB_OPTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; msoft-float EL/EB
&lt;span class=&quot;nv&quot;&gt;MULTILIB_DIRNAMES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; soft-float el eb
&lt;span class=&quot;nv&quot;&gt;MULTILIB_MATCHES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;EL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mel &lt;span class=&quot;nv&quot;&gt;EB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;meb msingle-float&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;m4650
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which instructs the gcc build system to generate libraries for combinations of
these three build flags. Flags that are separated by a space are combined, while
incompatible flag are separated with a slash. It is this fragment that generated
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mips64-elf-gcc -print-multi-lib&lt;/code&gt; output that we saw above.&lt;/p&gt;

&lt;p&gt;So, if you want to generate libraries for other ABIs, you simply edit (or create
a new one!) that file to what you need. In my case, I wanted to have libraries
compiled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-mabi=32&lt;/code&gt;, at it is the ABI used by most N64 games. So, I edited
my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t-elf&lt;/code&gt; fragment to be&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;MULTILIB_OPTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mabi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32 msoft-float EL/EB
&lt;span class=&quot;nv&quot;&gt;MULTILIB_DIRNAMES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 32 soft-float el eb
&lt;span class=&quot;nv&quot;&gt;MULTILIB_MATCHES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;EL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mel &lt;span class=&quot;nv&quot;&gt;EB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;meb msingle-float&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;m4650
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you were to compile this toolchain, you would get the following
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-print-multib-lib&lt;/code&gt; output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
32&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@mabi&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32
soft-float&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@msoft-float
el&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@EL
soft-float/el&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@msoft-float@EL
32/soft-float&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@mabi&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32@msoft-float
32/el&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@mabi&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32@EL
32/soft-float/el&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;@mabi&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32@msoft-float@EL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MULTILIB_DIRNAMES&lt;/code&gt; controls the name of the folder in which the libraries
reside. Note that this corresponds to the information before the semi-colon in
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-print-multilib-output&lt;/code&gt;, while the string after describes the build
options, preppended with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;. and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MULTILIB_MATCHES&lt;/code&gt; provides the synonyms of
some build options.&lt;/p&gt;

&lt;p&gt;There are other options than those discussed here. Feel free to read the
&lt;a href=&quot;https://gcc.gnu.org/onlinedocs//gcc-3.4.5/gccint/Fragments.html#Fragments&quot;&gt;Makefile
Fragment&lt;/a&gt;
of the gcc docs to have the whole story, or look at an example of custom target
in &lt;a href=&quot;https://github.com/glankk&quot;&gt;glank&lt;/a&gt;’s &lt;a href=&quot;https://github.com/glankk/n64/&quot;&gt;n64 repo&lt;/a&gt;, under config (as of July 9th, this is only in the
n64-ultra branch).&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;At least, that is how I think it works. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="gcc" /><category term="multilib" /><category term="multi ABI" /><category term="mips64-elf" /><category term="mips64" /><category term="mips" /><category term="toolchains" /><summary type="html">This article assumes that you know to compile a cross-compiler from scratch. If not, I recommend this succinct guide, or this longer guide if you want to have some context.</summary></entry><entry><title type="html">Converting between different Zernike polynomial index systems</title><link href="https://blog.joey-dumont.ca/zernike-polynomials-coefficients/" rel="alternate" type="text/html" title="Converting between different Zernike polynomial index systems" /><published>2018-09-27T00:00:00-04:00</published><updated>2018-09-27T00:00:00-04:00</updated><id>https://blog.joey-dumont.ca/zernike-polynomials-coefficients</id><content type="html" xml:base="https://blog.joey-dumont.ca/zernike-polynomials-coefficients/">&lt;p&gt;The Zernike polynomials are a very popular basis to describe aberrations in the
wavefront of optical beams. They are used in ophthalmology &lt;a class=&quot;citation&quot; href=&quot;#Thibos2000&quot;&gt; [1]&lt;/a&gt;, microscopy, and laser metrology, among others &lt;a class=&quot;citation&quot; href=&quot;#Wyant1992&quot;&gt; [2]&lt;/a&gt;. Because they are orthogonal on the unit disk, they are most
suitable to describe deviations from a flat phase front in a single transverse
plane of the beam.&lt;/p&gt;

&lt;p&gt;They are given by&lt;/p&gt;

\[\begin{align}
    Z_{n}^{m}(\rho,\phi) &amp;amp;=  R_{n}^{m}(\rho)\cos(m\phi)      &amp;amp; (m\geq0) \\
    Z_{n}^{m}(\rho,\phi) &amp;amp;=  R_{n}^{|m|}(\rho)\sin(|m|\phi)  &amp;amp; (m&amp;lt;0)
\end{align}\]

&lt;p&gt;where we can verify that they are indeed orthogonal on the unit disk:&lt;/p&gt;

\[\int_0^1\int_0^{2\pi} Z_{n}^{m}Z_{n'}^{m'}\rho d\rho d\phi
    = \frac{(1+\delta_{m,0})\pi}{2n+2}\delta_{n,n'}\delta_{m,m'}.\]

&lt;p&gt;For a given value of \(n\in\{\{0\}\cup\mathbb{N}\}=\mathbb{N}_0\), the possible
\(m\) values are in the range \(m\in\{-n,n\}\) and increase in increments of 2.
To simplify the enumeration of Zernike polynomials, various linear index schemes
have been devised. In short, each possible pair of \((n,m)\) is assigned to a
monotonically increasing index that we will denote \(j\). In this post, we’ll go
over some index schemes and write Python scripts that will allow us to map form
the linear index \(j\) to the quantum pair \((n,m)\). First, however, it will be
useful to investigate the structure of the pairs.&lt;/p&gt;

&lt;h3 id=&quot;the-triangular-structure-of-the-quantum-pairs&quot;&gt;The Triangular Structure of the Quantum Pairs&lt;/h3&gt;

&lt;p&gt;By simply enumerating the quantum pairs and arranging them on a grid where
rows indicate the value of \(n\) and columns the value of \(m\), their triangular
structure becomes readily apparent.&lt;/p&gt;

\[\begin{matrix}
             &amp;amp;            &amp;amp;            &amp;amp;  (0,0)   &amp;amp;           &amp;amp;           &amp;amp;            \\
             &amp;amp;            &amp;amp;   (1,-1)   &amp;amp;          &amp;amp;   (1,1)   &amp;amp;           &amp;amp;            \\
             &amp;amp;   (2,-2)   &amp;amp;            &amp;amp;  (2,0)   &amp;amp;           &amp;amp;   (2,2)   &amp;amp;            \\
   (3,-3)    &amp;amp;            &amp;amp;   (3,-1)   &amp;amp;          &amp;amp;   (3,1)   &amp;amp;           &amp;amp; (3,3)
\end{matrix}\]

&lt;p&gt;Since each row contains one element more than the previous row, the number of
elements contained in the first \(k\) rows is given by the \(k\)th triangular
number \(T_k\), defined by&lt;/p&gt;

\[T_k = \sum_{i=1}^{n} i = \frac{k(k+1)}{2}.\]

&lt;p&gt;For index systems that are monotonic in \(n\), i.e. most of them,  we can
directly relate the quantum number \(n\) to the index of the smallest triangular
number larger than \(j\). Fortunately, the index can easily be determined via
the formula &lt;a class=&quot;citation&quot; href=&quot;#DAurizio2015&quot;&gt; [3]&lt;/a&gt;&lt;/p&gt;

\[k = \left\lceil \frac{1+\sqrt{1+8n}}{2} \right\rceil - 1.\]

&lt;p&gt;The remainder \(r=j-T_k+n\) can then be used to determine what column corresponds
to that particular \(j\) value. The various linear schemes use different rules
to assign a column to the remainder.&lt;/p&gt;

&lt;h3 id=&quot;noll-indices&quot;&gt;Noll Indices&lt;/h3&gt;

&lt;p&gt;The rules to assign the Noll index is to have it monotonic in \(n\) and then
assign in order of increasing \(|m|\), where odd indices correspond to negative
values of \(m\) and even indices to positive values of \(m\). The correspondence
between the Noll indices and the quantum pairs is the subject of OEIS sequence
A176988 &lt;a class=&quot;citation&quot; href=&quot;#A176988&quot;&gt; [4]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since the Noll indices start at 1, the first quantum number can be written
as one less than the triangular number index, \(n=k-1\).&lt;/p&gt;

&lt;p&gt;The \(m\) value can be computed from the remainder \(r=j-T_k+n\). The latter can
serve as an index into the list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m = [k  for k in range(-n,n+2,2)]&lt;/code&gt;, as it
guaranteed to lie in the range \([0,n-1]\). Because of the rules governing the
assignment of signs, using the remainder directly as an index into this list is
rather tedious. A simpler way is to create a list that generates all the
possible values of \(|m|\) and sort them in ascending order. For \(n=3\), that
list would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1,1,3,3]&lt;/code&gt;. \(r\) can be used as an index in this list to
determine the value of \(|m|\). The sign is then decided by the parity of \(j\)
directly, as stated by the Noll rules.&lt;/p&gt;

&lt;p&gt;Here’s the Python code that implements this (a C++ implementation is available
as part of my
&lt;a href=&quot;https://github.com/joeydumont/zernike/blob/9eff81ebec7f0ef579ff01bfaabe23ff7ce8291c/src/zernike_indices.cpp#L41&quot;&gt;Zernike&lt;/a&gt;
library)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NollToQuantum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;triangular_numbers_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;triangular_numbers&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triangular_numbers&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rpn&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# -- Have to work value-per-value here.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;appendix-table-of-index-values-generated-by-the-algorithm&quot;&gt;Appendix: Table of index values generated by the algorithm&lt;/h3&gt;

&lt;style&gt;
table {
    border-collapse: collapse;
    width: 100%;
}

th, td {
    text-align: left;
    padding: 8px;
}

tr:nth-child(even) {background-color: #f2f2f2;}

&lt;/style&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;\(j\)            &lt;/th&gt;
      &lt;th&gt;Noll&lt;/th&gt;
      &lt;th&gt;Phasics&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\(1\)&lt;/td&gt;
      &lt;td&gt;\((0,0)\)&lt;/td&gt;
      &lt;td&gt;\((0,0)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(2\)&lt;/td&gt;
      &lt;td&gt;\((1,1)\)&lt;/td&gt;
      &lt;td&gt;\((1,1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(3\)&lt;/td&gt;
      &lt;td&gt;\((1,-1)\)&lt;/td&gt;
      &lt;td&gt;\((1,-1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(4\)&lt;/td&gt;
      &lt;td&gt;\((2,0)\)&lt;/td&gt;
      &lt;td&gt;\((2,0)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(5\)&lt;/td&gt;
      &lt;td&gt;\((2,-2)\)&lt;/td&gt;
      &lt;td&gt;\((2,2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(6\)&lt;/td&gt;
      &lt;td&gt;\((2,2)\)&lt;/td&gt;
      &lt;td&gt;\((2,-2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(7\)&lt;/td&gt;
      &lt;td&gt;\((3,-1)\)&lt;/td&gt;
      &lt;td&gt;\((3,1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(8\)&lt;/td&gt;
      &lt;td&gt;\((3,1)\)&lt;/td&gt;
      &lt;td&gt;\((3,-1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(9\)&lt;/td&gt;
      &lt;td&gt;\((3,-3)\)&lt;/td&gt;
      &lt;td&gt;\((3,3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(10\)&lt;/td&gt;
      &lt;td&gt;\((3,3)\)&lt;/td&gt;
      &lt;td&gt;\((3,-3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(11\)&lt;/td&gt;
      &lt;td&gt;\((4,0)\)&lt;/td&gt;
      &lt;td&gt;\((4,0)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(12\)&lt;/td&gt;
      &lt;td&gt;\((4,2)\)&lt;/td&gt;
      &lt;td&gt;\((4,2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(13\)&lt;/td&gt;
      &lt;td&gt;\((4,-2)\)&lt;/td&gt;
      &lt;td&gt;\((4,-2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(14\)&lt;/td&gt;
      &lt;td&gt;\((4,4)\)&lt;/td&gt;
      &lt;td&gt;\((4,4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(15\)&lt;/td&gt;
      &lt;td&gt;\((4,-4)\)&lt;/td&gt;
      &lt;td&gt;\((4,-4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(16\)&lt;/td&gt;
      &lt;td&gt;\((5,1)\)&lt;/td&gt;
      &lt;td&gt;\((5,1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(17\)&lt;/td&gt;
      &lt;td&gt;\((5,-1)\)&lt;/td&gt;
      &lt;td&gt;\((5,-1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(18\)&lt;/td&gt;
      &lt;td&gt;\((5,3)\)&lt;/td&gt;
      &lt;td&gt;\((5,3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(19\)&lt;/td&gt;
      &lt;td&gt;\((5,-3)\)&lt;/td&gt;
      &lt;td&gt;\((5,-3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(20\)&lt;/td&gt;
      &lt;td&gt;\((5,5)\)&lt;/td&gt;
      &lt;td&gt;\((5,5)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(21\)&lt;/td&gt;
      &lt;td&gt;\((5,-5)\)&lt;/td&gt;
      &lt;td&gt;\((5,-5)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(22\)&lt;/td&gt;
      &lt;td&gt;\((6,0)\)&lt;/td&gt;
      &lt;td&gt;\((6,0)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(23\)&lt;/td&gt;
      &lt;td&gt;\((6,-2)\)&lt;/td&gt;
      &lt;td&gt;\((6,2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(24\)&lt;/td&gt;
      &lt;td&gt;\((6,2)\)&lt;/td&gt;
      &lt;td&gt;\((6,-2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(25\)&lt;/td&gt;
      &lt;td&gt;\((6,-4)\)&lt;/td&gt;
      &lt;td&gt;\((6,4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(26\)&lt;/td&gt;
      &lt;td&gt;\((6,4)\)&lt;/td&gt;
      &lt;td&gt;\((6,-4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(27\)&lt;/td&gt;
      &lt;td&gt;\((6,-6)\)&lt;/td&gt;
      &lt;td&gt;\((6,6)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(28\)&lt;/td&gt;
      &lt;td&gt;\((6,6)\)&lt;/td&gt;
      &lt;td&gt;\((6,-6)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(29\)&lt;/td&gt;
      &lt;td&gt;\((7,-1)\)&lt;/td&gt;
      &lt;td&gt;\((7,1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(30\)&lt;/td&gt;
      &lt;td&gt;\((7,1)\)&lt;/td&gt;
      &lt;td&gt;\((7,-1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(31\)&lt;/td&gt;
      &lt;td&gt;\((7,-3)\)&lt;/td&gt;
      &lt;td&gt;\((7,3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(32\)&lt;/td&gt;
      &lt;td&gt;\((7,3)\)&lt;/td&gt;
      &lt;td&gt;\((7,-3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(33\)&lt;/td&gt;
      &lt;td&gt;\((7,-5)\)&lt;/td&gt;
      &lt;td&gt;\((7,5)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(34\)&lt;/td&gt;
      &lt;td&gt;\((7,5)\)&lt;/td&gt;
      &lt;td&gt;\((7,-5)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(35\)&lt;/td&gt;
      &lt;td&gt;\((7,-7)\)&lt;/td&gt;
      &lt;td&gt;\((7,7)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(36\)&lt;/td&gt;
      &lt;td&gt;\((7,7)\)&lt;/td&gt;
      &lt;td&gt;\((7,-7)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(37\)&lt;/td&gt;
      &lt;td&gt;\((8,0)\)&lt;/td&gt;
      &lt;td&gt;\((8,0)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(38\)&lt;/td&gt;
      &lt;td&gt;\((8,2)\)&lt;/td&gt;
      &lt;td&gt;\((8,2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(39\)&lt;/td&gt;
      &lt;td&gt;\((8,-2)\)&lt;/td&gt;
      &lt;td&gt;\((8,-2)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(40\)&lt;/td&gt;
      &lt;td&gt;\((8,4)\)&lt;/td&gt;
      &lt;td&gt;\((8,4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(41\)&lt;/td&gt;
      &lt;td&gt;\((8,-4)\)&lt;/td&gt;
      &lt;td&gt;\((8,-4)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(42\)&lt;/td&gt;
      &lt;td&gt;\((8,6)\)&lt;/td&gt;
      &lt;td&gt;\((8,6)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(43\)&lt;/td&gt;
      &lt;td&gt;\((8,-6)\)&lt;/td&gt;
      &lt;td&gt;\((8,-6)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(44\)&lt;/td&gt;
      &lt;td&gt;\((8,8)\)&lt;/td&gt;
      &lt;td&gt;\((8,8)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(45\)&lt;/td&gt;
      &lt;td&gt;\((8,-8)\)&lt;/td&gt;
      &lt;td&gt;\((8,-8)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(46\)&lt;/td&gt;
      &lt;td&gt;\((9,1)\)&lt;/td&gt;
      &lt;td&gt;\((9,1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(47\)&lt;/td&gt;
      &lt;td&gt;\((9,-1)\)&lt;/td&gt;
      &lt;td&gt;\((9,-1)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(48\)&lt;/td&gt;
      &lt;td&gt;\((9,3)\)&lt;/td&gt;
      &lt;td&gt;\((9,3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(49\)&lt;/td&gt;
      &lt;td&gt;\((9,-3)\)&lt;/td&gt;
      &lt;td&gt;\((9,-3)\)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\(50\)&lt;/td&gt;
      &lt;td&gt;\((9,5)\)&lt;/td&gt;
      &lt;td&gt;\((9,5)\)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="Zernike polynomials" /><category term="indexing conventions" /><category term="Noll" /><category term="Phasics" /><summary type="html">The Zernike polynomials are a very popular basis to describe aberrations in the wavefront of optical beams. They are used in ophthalmology  [4], microscopy, and laser metrology, among others  [4]. Because they are orthogonal on the unit disk, they are most suitable to describe deviations from a flat phase front in a single transverse plane of the beam.</summary></entry><entry><title type="html">Loading complex numbers in the C++ format from text files into NumPy</title><link href="https://blog.joey-dumont.ca/read-c-format-complex-numbers-with-numpy/" rel="alternate" type="text/html" title="Loading complex numbers in the C++ format from text files into NumPy" /><published>2018-07-24T00:00:00-04:00</published><updated>2018-07-24T00:00:00-04:00</updated><id>https://blog.joey-dumont.ca/read-c-format-complex-numbers-with-numpy</id><content type="html" xml:base="https://blog.joey-dumont.ca/read-c-format-complex-numbers-with-numpy/">&lt;p&gt;In my workflow, I typically use C++ for production code and Python for data
post-processing and data analysis. A major annoyance is that NumPy’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genfromtxt&lt;/code&gt; does not recognize the C++ complex number format.&lt;/p&gt;

&lt;p&gt;Of course, one could write their own I/O for their C++ production codes, but
most libraries have built-in I/O functions and it’s just a pain. It’s much
easier to get Python to read the C++ format!&lt;/p&gt;

&lt;h3 id=&quot;the-issue&quot;&gt;The Issue&lt;/h3&gt;

&lt;p&gt;C++ represents a given complex number \(z=a+ib\) as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a,b)&lt;/code&gt;. When using
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genfromtxt&lt;/code&gt; to read a file containing an array of complex numbers, the obvious&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genfromtxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;complex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;yields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaN&lt;/code&gt;s for the real part and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;s for the imaginary part. To get Python
to understand the format, an easy solution is to first parse the elements of the
array as strings, then use a lambda function to effectively cast the strings
as complex numbers. Here’s the code.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The Code&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoadComplexData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genfromtext_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Load complex data in the C++ format in numpy.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array_as_strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genfromtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genfromtext_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;complex_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;complex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complex_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_as_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we load the array of complex numbers as an array of strings in Python.
Then, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.vectorize&lt;/code&gt; to define a callable that takes each of the array
and applies the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complex(*eval(x))&lt;/code&gt; to it. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval()&lt;/code&gt; takes the string and evaluates
it to a tuple of floats. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; operator unpacks the tuple such that we are calling
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complex(a,b)&lt;/code&gt; properly. This returns a complex number in Python format.&lt;/p&gt;

&lt;p&gt;A solution based on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genfromtxt&lt;/code&gt; converter could be more elegant, but I wasn’t
able to find a way to apply a converter to every column of the input file
instead of a specific column.&lt;/p&gt;

&lt;p&gt;You can try it for yourself with these
&lt;a href=&quot;https://blog.joey-dumont.ca/assets/posts/read-c-format-complex-numbers-with-numpy/complex_data_example.tar.gz&quot;&gt;files&lt;/a&gt;. This was tested with Numpy v1.14.5.&lt;/p&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="complex numbers" /><category term="numpy" /><category term="C++" /><category term="genfromtxt" /><summary type="html">In my workflow, I typically use C++ for production code and Python for data post-processing and data analysis. A major annoyance is that NumPy’s genfromtxt does not recognize the C++ complex number format.</summary></entry><entry><title type="html">vnc through SSH: how to control your desktop remotely</title><link href="https://blog.joey-dumont.ca/vnc-through-ssh-how-to-control-your-desktop-remotely/" rel="alternate" type="text/html" title="vnc through SSH: how to control your desktop remotely" /><published>2018-01-17T00:00:00-05:00</published><updated>2018-01-17T00:00:00-05:00</updated><id>https://blog.joey-dumont.ca/vnc-through-ssh-how-to-control-your-desktop-remotely</id><content type="html" xml:base="https://blog.joey-dumont.ca/vnc-through-ssh-how-to-control-your-desktop-remotely/">&lt;p&gt;I won’t go into too much detail in this post, as there are &lt;a href=&quot;http://www.cl.cam.ac.uk/research/dtg/attarchive/vnc/sshvnc.html&quot;&gt;multiple&lt;/a&gt; &lt;a href=&quot;https://www.cyberciti.biz/tips/tunneling-vnc-connections-over-ssh-howto.html&quot;&gt;guides&lt;/a&gt;
that go above and beyond in explaining the behind-the-scenes of tunnelling
VNC connections through SSH. Note that this solution uses TigerVNC’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x0vncserver&lt;/code&gt;
to control the remote X server. Simply use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vncserver&lt;/code&gt; if you want to control
a different X server.&lt;/p&gt;

&lt;p&gt;The setup is quite simple, but requires two terminal windows. In the first terminal,
SSH into your remote machine with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;b&gt;user@local-machine &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/b&gt;ssh -Y &amp;lt;remote.machine.com&amp;gt; -L 5900:localhost:5900
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;b&gt;remoteuser@remote-machine &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/b&gt; x0vncserver -display :0 -passwordfile ~/.vnc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, in the second terminal on your local machine, you can simply type&lt;/p&gt;

&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;b&gt;user@local-machine &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;/b&gt; vncviewer localhost:5900
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-L&lt;/code&gt; flag in the SSH connection sets up port forwarding from the local machine
to the remote machine. In short, all unbound traffic that goes through the specified
port on the local machine is forward to the other port on the remote machine. Here we
choose port 5900 on both machines as it is the default port for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x0vncserver&lt;/code&gt;,
but both can be changed freely.&lt;/p&gt;

&lt;p&gt;Make sure to generate a password file for VNC by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vncpasswd&lt;/code&gt; and pass
it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x0vncserver&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwordfile&lt;/code&gt; flag. Here we choose the default.&lt;/p&gt;

&lt;p&gt;The same method with generic ports would read&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;b&gt;user@local-machine &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/b&gt;ssh -Y &amp;lt;remote.machine.com&amp;gt; -L &amp;lt;xxxx&amp;gt;:localhost:&amp;lt;yyyy&amp;gt;
&lt;b&gt;remoteuser@remote-machine &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/b&gt; x0vncserver -rfbport &amp;lt;yyyy&amp;gt; -display :0 \
                                         -passwordfile ~/.vnc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div style=&quot;text-indent: 0&quot;&gt;and&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;b&gt;user@local-machine &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;/b&gt; vncviewer localhost:&amp;lt;xxxx&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Until next time, cheers!&lt;/p&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="vnc" /><category term="ssh" /><category term="remote desktop" /><category term="linux" /><summary type="html">I won’t go into too much detail in this post, as there are multiple guides that go above and beyond in explaining the behind-the-scenes of tunnelling VNC connections through SSH. Note that this solution uses TigerVNC’s x0vncserver to control the remote X server. Simply use vncserver if you want to control a different X server.</summary></entry><entry><title type="html">Have yaourt save compiled packages to /var/cache/pacman/pkg</title><link href="https://blog.joey-dumont.ca/have-yaourt-save-compiled-packages-to/" rel="alternate" type="text/html" title="Have yaourt save compiled packages to /var/cache/pacman/pkg" /><published>2015-04-14T16:46:00-04:00</published><updated>2015-04-14T16:46:00-04:00</updated><id>https://blog.joey-dumont.ca/have-yaourt-save-compiled-packages-to</id><content type="html" xml:base="https://blog.joey-dumont.ca/have-yaourt-save-compiled-packages-to/">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;The title of this post might not mean much to most of you, but for those few lucky enough to use Arch Linux on a daily basis, this could be of use to you. By default, &lt;i&gt;yaourt&lt;/i&gt; does not keep the package files it produces, it deletes them after installation. Since the AUR deals mostly with unsupported packages, making it  imperative that you be able to roll back to older packages, this is not useful default behaviour. &lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;To have yaourt export your compiled packages to the standard location, /var/cache/pacman/pkg/, edit /etc/yaourtrc and change the line  &lt;br /&gt;&lt;blockquote&gt;#EXPORT=0&lt;/blockquote&gt;to   &lt;br /&gt;&lt;blockquote&gt;EXPORT=2&lt;/blockquote&gt;That is all. Have a nice day!  &lt;/div&gt;&lt;/div&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="command-line" /><category term="yaourt" /><category term="linux" /><category term="arch-linux" /><summary type="html">&amp;nbsp;&amp;nbsp;&amp;nbsp;The title of this post might not mean much to most of you, but for those few lucky enough to use Arch Linux on a daily basis, this could be of use to you. By default, yaourt does not keep the package files it produces, it deletes them after installation. Since the AUR deals mostly with unsupported packages, making it imperative that you be able to roll back to older packages, this is not useful default behaviour. &amp;nbsp;&amp;nbsp;&amp;nbsp;To have yaourt export your compiled packages to the standard location, /var/cache/pacman/pkg/, edit /etc/yaourtrc and change the line #EXPORT=0to EXPORT=2That is all. Have a nice day!</summary></entry><entry><title type="html">Google Calendar Material Design</title><link href="https://blog.joey-dumont.ca/google-calendar-material-design/" rel="alternate" type="text/html" title="Google Calendar Material Design" /><published>2014-11-11T15:55:00-05:00</published><updated>2014-11-11T15:55:00-05:00</updated><id>https://blog.joey-dumont.ca/google-calendar-material-design</id><content type="html" xml:base="https://blog.joey-dumont.ca/google-calendar-material-design/">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;My Nexus 4 prompted me last night for permission to update Gmail and &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.calendar&amp;amp;hl=en&quot;&gt;Google Calendar&lt;/a&gt;. I must say, while Gmail looks slightly better than it did, GCal has received a much needed revamp, especially the widget. I do not have a screenshot of the previous version, but the colour scheme was terrible and the layout was such that it was hard to determine the division between days. It was also very difficult to quickly glance at a calendar to get some information.&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-0-HLzdJuoyE/VGJ3BDRi4iI/AAAAAAAAEAE/akFfFqq0RcM/s1600/Screenshot_2014-11-11-15-36-33.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-0-HLzdJuoyE/VGJ3BDRi4iI/AAAAAAAAEAE/akFfFqq0RcM/s320/Screenshot_2014-11-11-15-36-33.png&quot; width=&quot;192&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;A screenshot of the new GCal widget&lt;br /&gt;on my Nexus 4.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;The new version, released yesterday, has received the &quot;Material Design&quot; treatment; the colours are a little more tame, and the division between events and dates is much clearer. Worth the (free) update.&lt;br /&gt;&lt;br /&gt;I guess I'm saying I like the new designs of Google.&lt;/div&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="google calendar" /><category term="nexus" /><summary type="html">&amp;nbsp;&amp;nbsp;&amp;nbsp;My Nexus 4 prompted me last night for permission to update Gmail and Google Calendar. I must say, while Gmail looks slightly better than it did, GCal has received a much needed revamp, especially the widget. I do not have a screenshot of the previous version, but the colour scheme was terrible and the layout was such that it was hard to determine the division between days. It was also very difficult to quickly glance at a calendar to get some information.A screenshot of the new GCal widgeton my Nexus 4.&amp;nbsp;&amp;nbsp;&amp;nbsp;The new version, released yesterday, has received the &quot;Material Design&quot; treatment; the colours are a little more tame, and the division between events and dates is much clearer. Worth the (free) update.I guess I'm saying I like the new designs of Google.</summary></entry><entry><title type="html">Dual basis and its applications</title><link href="https://blog.joey-dumont.ca/dual-basis-and-its-applications/" rel="alternate" type="text/html" title="Dual basis and its applications" /><published>2013-04-21T13:55:00-04:00</published><updated>2013-04-21T13:55:00-04:00</updated><id>https://blog.joey-dumont.ca/dual-basis-and-its-applications</id><content type="html" xml:base="https://blog.joey-dumont.ca/dual-basis-and-its-applications/">&lt;div dir=&quot;ltr&quot; style=&quot;text-align:  justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;In the physical sciences, the scientist mostly tries to put the problem in a form that is easily solvable. One such form is the eigenvector expansion where one solves a simpler problem and assumes that the more difficult problem can be decomposed in a sum of the simpler solutions.  &lt;/div&gt; &lt;div dir=&quot;ltr&quot;, style=&quot;text-align: justify;&quot; trbidy=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;This kind of problem generally involves solving the eigenvalue problem of a particular matrix. Assuming that you know how to do that, this is all fine and well. However, it is also common to use orthogonality relations to simplify the solution. For a general matrix $A$, the resulting eigenvectors need not be orthogonal. That's a problem. Let's look for a solution.  &lt;/div&gt; &lt;div dir=&quot;ltr&quot;, style=&quot;text-align: justify;&quot; trbidy=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Adopting the braket notation and denoting an eigenvector by $|e_i\rangle$, we seek new vectors such that  $$ \langle f^i|e_j\rangle = \delta^i_j.$$ To see how we can compute those vectors, consider the original eigenvalue problem  $$ \label{eq:eigenvalue}A|e_i\rangle = \lambda_i|e_i\rangle .$$ We will use the fact that both sets of eigenvectors are complete so that there exists a closure relation  $$ \sum_i |e_i\rangle\langle f^i| = 1.$$ Now, pre-multipling \eqref{eq:eigenvalue} by $\langle f^j|$ and post-multiplying by $\langle f^i|$ and summing over the index $i$, we get  $$ \sum_i \langle f^j|A|e_i\rangle\langle f^i| = \sum_i \lambda_i \langle f^j|e_i\rangle\langle f^i|.$$ Using our orthogonality relations on the right-hand side of this last equation and the closure relation on the left-hand side, we get  $$ \langle f^j| A = \sum_i \lambda_i \langle f^i| \delta^j_i. $$ The Dirac delta makes the sum disappear as usual and we have  $$ \langle f^j| A = \lambda_j \langle f^j|. $$ In other words, the $\langle f^j|$ are the row eigenvectors of  $A$ and have the same eigenvalues as the set $|e_i\rangle$! &lt;/div&gt; &lt;div dir=&quot;ltr&quot;, style=&quot;text-align: justify;&quot; trbidy=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;So we find that these new &quot;contravariant&quot; vectors are actually the &lt;i&gt;left eigenvectors&lt;/i&gt; of the matrix $A$. Moreover, the decomposition of any vector in the original set of covariant vectors is given by the dot product with the vectors in the dual basis. Say we have a vector $|v\rangle$, its decomposition is given by  $$ |v\rangle = \sum_i \langle f^i|v\rangle|e_i\rangle .$$ &lt;/div&gt; &lt;div dir=&quot;ltr&quot;, style=&quot;text-align: justify;&quot; trbidy=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;This eigendecomposition is incredibly useful in solving differential equations, smoothing numerically unstable solutions...  &lt;/div&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><summary type="html">&amp;nbsp;&amp;nbsp;&amp;nbsp;In the physical sciences, the scientist mostly tries to put the problem in a form that is easily solvable. One such form is the eigenvector expansion where one solves a simpler problem and assumes that the more difficult problem can be decomposed in a sum of the simpler solutions. &amp;nbsp;&amp;nbsp;&amp;nbsp;This kind of problem generally involves solving the eigenvalue problem of a particular matrix. Assuming that you know how to do that, this is all fine and well. However, it is also common to use orthogonality relations to simplify the solution. For a general matrix $A$, the resulting eigenvectors need not be orthogonal. That's a problem. Let's look for a solution. &amp;nbsp;&amp;nbsp;&amp;nbsp;Adopting the braket notation and denoting an eigenvector by $|e_i\rangle$, we seek new vectors such that $$ \langle f^i|e_j\rangle = \delta^i_j.$$ To see how we can compute those vectors, consider the original eigenvalue problem $$ \label{eq:eigenvalue}A|e_i\rangle = \lambda_i|e_i\rangle .$$ We will use the fact that both sets of eigenvectors are complete so that there exists a closure relation $$ \sum_i |e_i\rangle\langle f^i| = 1.$$ Now, pre-multipling \eqref{eq:eigenvalue} by $\langle f^j|$ and post-multiplying by $\langle f^i|$ and summing over the index $i$, we get $$ \sum_i \langle f^j|A|e_i\rangle\langle f^i| = \sum_i \lambda_i \langle f^j|e_i\rangle\langle f^i|.$$ Using our orthogonality relations on the right-hand side of this last equation and the closure relation on the left-hand side, we get $$ \langle f^j| A = \sum_i \lambda_i \langle f^i| \delta^j_i. $$ The Dirac delta makes the sum disappear as usual and we have $$ \langle f^j| A = \lambda_j \langle f^j|. $$ In other words, the $\langle f^j|$ are the row eigenvectors of $A$ and have the same eigenvalues as the set $|e_i\rangle$! &amp;nbsp;&amp;nbsp;&amp;nbsp;So we find that these new &quot;contravariant&quot; vectors are actually the left eigenvectors of the matrix $A$. Moreover, the decomposition of any vector in the original set of covariant vectors is given by the dot product with the vectors in the dual basis. Say we have a vector $|v\rangle$, its decomposition is given by $$ |v\rangle = \sum_i \langle f^i|v\rangle|e_i\rangle .$$ &amp;nbsp;&amp;nbsp;&amp;nbsp;This eigendecomposition is incredibly useful in solving differential equations, smoothing numerically unstable solutions...</summary></entry><entry><title type="html">Interfacing Armadillo and FFTW</title><link href="https://blog.joey-dumont.ca/interfacing-armadillo-and-fftw/" rel="alternate" type="text/html" title="Interfacing Armadillo and FFTW" /><published>2013-03-10T23:31:00-04:00</published><updated>2013-03-10T23:31:00-04:00</updated><id>https://blog.joey-dumont.ca/interfacing-armadillo-and-fftw</id><content type="html" xml:base="https://blog.joey-dumont.ca/interfacing-armadillo-and-fftw/">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;FFTW, or the &lt;i&gt;&lt;a href=&quot;http://fftw.org/&quot;&gt;Fastest Fourier Transform in the West&lt;/a&gt;&lt;/i&gt;, is an awesome C library used to, well, perform FFTs. &lt;a href=&quot;http://arma.sourceforce.net/&quot;&gt;Armadillo&lt;/a&gt;, on the other hand, is an awesome C++ library that implements linear algebra operations. Both are renowned for their amazing speed and, especially the latter, ease of use.  &lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Now suppose you want to use Armadillo in concert with FFTW. By default, FFTW assumes that you are using &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;fftw_complex*&lt;/span&gt; arrays which memory are allocated using &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;fftw_malloc&lt;/span&gt;. Now, assuming that you want to transform elements of an Armadillo vector or matrix, copying the data from the matrix to a newly allocated array may not be desirable (or it might be, depending on the performance hit incurred by not using &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;fftw_malloc&lt;/span&gt;). Then, your C++ code should be something like &lt;script src=&quot;https://gist.github.com/valandil/cc98f474360f027240f8.js&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;I'm by no means an expert, but this snippet works beautifully in my own code. &lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Please feel free to point out any factual errors.  &lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&lt;b&gt;Update:&lt;/b&gt; Note that the operations in the Gist do not commute, i.e. the order in which they are done is important. If you put data in the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;samples&lt;/span&gt;matrix before creating the plan, your columns will be overwritten. Pay attention! &lt;/div&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="c++" /><category term="programming" /><category term="fftw" /><category term="armadillo" /><summary type="html">&amp;nbsp;&amp;nbsp;&amp;nbsp;FFTW, or the Fastest Fourier Transform in the West, is an awesome C library used to, well, perform FFTs. Armadillo, on the other hand, is an awesome C++ library that implements linear algebra operations. Both are renowned for their amazing speed and, especially the latter, ease of use. &amp;nbsp;&amp;nbsp;&amp;nbsp;Now suppose you want to use Armadillo in concert with FFTW. By default, FFTW assumes that you are using fftw_complex* arrays which memory are allocated using fftw_malloc. Now, assuming that you want to transform elements of an Armadillo vector or matrix, copying the data from the matrix to a newly allocated array may not be desirable (or it might be, depending on the performance hit incurred by not using fftw_malloc). Then, your C++ code should be something like &amp;nbsp;&amp;nbsp;&amp;nbsp;I'm by no means an expert, but this snippet works beautifully in my own code. &amp;nbsp;&amp;nbsp;&amp;nbsp;Please feel free to point out any factual errors. Update: Note that the operations in the Gist do not commute, i.e. the order in which they are done is important. If you put data in the samplesmatrix before creating the plan, your columns will be overwritten. Pay attention!</summary></entry><entry><title type="html">Arrow in the Knee: the Genesis</title><link href="https://blog.joey-dumont.ca/arrow-in-knee-genesis/" rel="alternate" type="text/html" title="Arrow in the Knee: the Genesis" /><published>2013-01-24T01:06:00-05:00</published><updated>2013-01-24T01:06:00-05:00</updated><id>https://blog.joey-dumont.ca/arrow-in-knee-genesis</id><content type="html" xml:base="https://blog.joey-dumont.ca/arrow-in-knee-genesis/">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; So my wife was re-reading the epic fantasy pentalogy &lt;i&gt;The Belgariad &lt;/i&gt;by David Eddings [1]. It's a fantastic coming-of-age, prophecy-fulfilling, magic-filled story. Every character is fully developed and they are all thoroughly likable.  &lt;br /&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; But now to the important part. In the &lt;i&gt;Queen of Sorcery&lt;/i&gt; book [2,p.222], originally published in 1982, it is revealed that Count Reldegen, an Asturian, is limping. This sparks the following conversation: &lt;br /&gt;&lt;blockquote&gt;&quot;What happened to your leg?&quot; Wolf asked him. &lt;br /&gt;&quot;An arrow in the knee.&quot; The count shrugged.&lt;/blockquote&gt;Yes, that's right, an &lt;i&gt;arrow in the knee&lt;/i&gt;!   &lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: justify;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Now go read &lt;i&gt;The Belgariad&lt;/i&gt; so you know why it matters that Reldegen is an Asturian.  &lt;/div&gt;&lt;br /&gt;&lt;div id=&quot;#ft1&quot;&gt;[1] Amateurish introductory line, I know.&lt;/div&gt;&lt;div id=&quot;#ft2&quot;&gt;[2] D. Eddings. &lt;i&gt;Queen of Sorcery&lt;/i&gt; in &lt;i&gt;The Belgariad&lt;/i&gt;. 2002. New York: Ballantine.&lt;/div&gt;&lt;/div&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><summary type="html">&amp;nbsp;&amp;nbsp;&amp;nbsp; So my wife was re-reading the epic fantasy pentalogy The Belgariad by David Eddings [1]. It's a fantastic coming-of-age, prophecy-fulfilling, magic-filled story. Every character is fully developed and they are all thoroughly likable. &amp;nbsp;&amp;nbsp;&amp;nbsp; But now to the important part. In the Queen of Sorcery book [2,p.222], originally published in 1982, it is revealed that Count Reldegen, an Asturian, is limping. This sparks the following conversation: &quot;What happened to your leg?&quot; Wolf asked him. &quot;An arrow in the knee.&quot; The count shrugged.Yes, that's right, an arrow in the knee! &amp;nbsp;&amp;nbsp;&amp;nbsp;Now go read The Belgariad so you know why it matters that Reldegen is an Asturian. [1] Amateurish introductory line, I know.[2] D. Eddings. Queen of Sorcery in The Belgariad. 2002. New York: Ballantine.</summary></entry><entry><title type="html">(Literary) Ramblings about the Universe</title><link href="https://blog.joey-dumont.ca/literary-ramblings-about-universe/" rel="alternate" type="text/html" title="(Literary) Ramblings about the Universe" /><published>2012-09-08T00:19:00-04:00</published><updated>2012-09-08T00:19:00-04:00</updated><id>https://blog.joey-dumont.ca/literary-ramblings-about-universe</id><content type="html" xml:base="https://blog.joey-dumont.ca/literary-ramblings-about-universe/">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp;While sipping away at my alcoholic drink, I had, as men usually have, philosophical matters spring to my mind. Wrought body and soul in the shadow of the night, my first instinct was to share my thoughts with the world.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp;In &lt;a href=&quot;http://www.amazon.ca/gp/product/0553208845/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=15121&amp;amp;creative=330641&amp;amp;creativeASIN=0553208845&amp;amp;linkCode=as2&amp;amp;tag=blogjoeydumon-20&quot; target=&quot;_blank&quot;&gt;Siddhartha&lt;/a&gt;, by Hermann Hesse, a young prodigy of his tribe leaves his home and undertakes a long journey to gain spiritual enlightenment. In the process of knowing himself and the world, he loses himself. He goes against all the teachings of the elders of his tribe and everything he has always known. However, in the end, while not returning to his home, he returns in a state resembling his old state, but with hard-gained knowledge and wisdom.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp;This very idea of movie through space and time but coming back to a similar place, the notion of the cycles in life, of the cycles in Nature, is interesting to me. For a reason I can't explain, this is appealing to me. The idea that, through human history, through the succession of generations, I get to live forever. &quot;At the still point of the turning world&quot;, through the center that must hold, where everyone is one and nothing, where the lonely streams become a river, the river of life, I can identify with everything. My &quot;soul is the whole world&quot;.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;This is indeed very hard to explain. Even T.S. Eliot had problems expressing this idea:&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;That was a way of putting it - not very satisfactory:&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;A periphrastic study in a worn-out poetical fashion,&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Leaving one still with the intolerable wrestle&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;With words and meanings. The poetry does not matter.&lt;/div&gt;&lt;/blockquote&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;although the idea is, verily, quite simple. In a place, where there exists no time and no space, we are one. But not really.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;This still point, being defined by the Universe, must be &lt;i&gt;of&lt;/i&gt;&amp;nbsp;the Universe. Imagine a rolling wheel. Its center does not move, being the center, but it must rotate as to accompany the wheel. We do not see it turning, but it must. We can relate this analogy to the conclusion of Siddhartha. &lt;i&gt;Carpe Diem&lt;/i&gt;. Everything that is the world is beautiful; it must be appreciated and loved and such. Everything has sin and virtue in it.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&amp;nbsp; &amp;nbsp;But this isn't true. It is true only at the still point. What shall we do? Locally, then, an ethics system must be enforced. This ethical system, built by the people inhabiting the region of space and time by the means of logic and reason, must fulfill the requirements and principles of the people.&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;Globally, this is my interpretation of this. Although I do not think the world completely deterministic, I believe that the entirety of possibilities is contained in the world. At the still point, then, the singularity of the Big Bang, every possible outcome exists and is as one; the future of the Universe is written as the wavefunction fo the Universe. At that time, the river breaks into a million pieces.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;What did I just say? I am confused.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp;The poetry does not matter, but its equivocacy a way to expose without explaining, a way to confuse and inform.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp;This is it for now, but I shall return.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Joey Dumont</name><email>me@joey-dumont.ca</email></author><category term="still_point" /><category term="philosophy" /><summary type="html">&amp;nbsp; &amp;nbsp;While sipping away at my alcoholic drink, I had, as men usually have, philosophical matters spring to my mind. Wrought body and soul in the shadow of the night, my first instinct was to share my thoughts with the world.&amp;nbsp; &amp;nbsp;In Siddhartha, by Hermann Hesse, a young prodigy of his tribe leaves his home and undertakes a long journey to gain spiritual enlightenment. In the process of knowing himself and the world, he loses himself. He goes against all the teachings of the elders of his tribe and everything he has always known. However, in the end, while not returning to his home, he returns in a state resembling his old state, but with hard-gained knowledge and wisdom.&amp;nbsp;&amp;nbsp; &amp;nbsp;This very idea of movie through space and time but coming back to a similar place, the notion of the cycles in life, of the cycles in Nature, is interesting to me. For a reason I can't explain, this is appealing to me. The idea that, through human history, through the succession of generations, I get to live forever. &quot;At the still point of the turning world&quot;, through the center that must hold, where everyone is one and nothing, where the lonely streams become a river, the river of life, I can identify with everything. My &quot;soul is the whole world&quot;.&amp;nbsp;&amp;nbsp; &amp;nbsp;This is indeed very hard to explain. Even T.S. Eliot had problems expressing this idea:&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;That was a way of putting it - not very satisfactory:A periphrastic study in a worn-out poetical fashion,Leaving one still with the intolerable wrestleWith words and meanings. The poetry does not matter.although the idea is, verily, quite simple. In a place, where there exists no time and no space, we are one. But not really.&amp;nbsp;&amp;nbsp; &amp;nbsp;This still point, being defined by the Universe, must be of&amp;nbsp;the Universe. Imagine a rolling wheel. Its center does not move, being the center, but it must rotate as to accompany the wheel. We do not see it turning, but it must. We can relate this analogy to the conclusion of Siddhartha. Carpe Diem. Everything that is the world is beautiful; it must be appreciated and loved and such. Everything has sin and virtue in it.&amp;nbsp; &amp;nbsp;But this isn't true. It is true only at the still point. What shall we do? Locally, then, an ethics system must be enforced. This ethical system, built by the people inhabiting the region of space and time by the means of logic and reason, must fulfill the requirements and principles of the people.&amp;nbsp;&amp;nbsp; &amp;nbsp;Globally, this is my interpretation of this. Although I do not think the world completely deterministic, I believe that the entirety of possibilities is contained in the world. At the still point, then, the singularity of the Big Bang, every possible outcome exists and is as one; the future of the Universe is written as the wavefunction fo the Universe. At that time, the river breaks into a million pieces.&amp;nbsp; &amp;nbsp;What did I just say? I am confused.&amp;nbsp;&amp;nbsp;The poetry does not matter, but its equivocacy a way to expose without explaining, a way to confuse and inform.&amp;nbsp;&amp;nbsp; &amp;nbsp;This is it for now, but I shall return.&amp;nbsp;</summary></entry></feed>